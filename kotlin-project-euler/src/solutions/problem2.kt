package solutions

import kotlin.system.measureTimeMillis

/**
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
 * By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
 * find the sum of the even-valued terms.
 */

fun fibSeq(max: Int): List<Int> {
    var firstVal = 0
    var secondVal = 1

    val list = mutableListOf(secondVal)

    while (secondVal < max) {
        val tmp = secondVal
        secondVal += firstVal
        firstVal = tmp

        if (secondVal % 2 == 0) {
            list.add(secondVal)
        }
    }

    return list
}

fun evenFibSeq(max: Int): List<Int> {
    var firstVal = 0
    var secondVal = 2

    val list = mutableListOf<Int>()

    while (secondVal < max) {
        val tmp = secondVal
        secondVal += firstVal
        firstVal = tmp

        list.add(secondVal)
    }

    return list
}

fun main(args: Array<String>) {
    val max = 4000000

    val measuredTimeNaive = measureTimeMillis {
        println("Even Fibonacci numbers until $max are ${fibSeq(max).joinToString()}")
    }

    println("Took $measuredTimeNaive to calculate")

    val time = measureTimeMillis {
        println("Fibonacci with even numbers until $max are ${evenFibSeq(max).joinToString()}")
    }

    println("Took $time to calculate")
}
